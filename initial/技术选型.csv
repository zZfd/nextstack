领域 (Area),技术选型,角色与原因
工作区 (Workspace),Turborepo + pnpm,Monorepo 管理：Turborepo 提供高性能的构建、测试和缓存系统。pnpm 则通过其独特的 node_modules 结构，高效地处理 Monorepo 中的依赖关系。
核心语言,TypeScript,类型安全：贯穿整个项目的基石，从数据库到前端 UI，确保代码的健壮性和可维护性。
后端运行时,Node.js,JavaScript 运行时：统一前后端语言，实现 TypeScript 全栈。
后端框架,Express.js,Web 服务器：轻量、稳定、生态系统成熟，作为 tRPC 服务器的底层 HTTP 服务和 WebSocket 服务的载体。
API 层,tRPC,端到端类型安全的 API：核心优势所在。自动推断 API 类型，无需手动管理接口定义，提供函数式的调用体验，并原生支持 WebSocket (Subscriptions)。
数据库,PostgreSQL,关系型数据库：功能强大、可靠且可扩展的开源数据库，能满足绝大多数业务场景的需求。
数据访问 (ORM),Prisma,下一代 ORM：提供极致的类型安全体验，其生成的 Prisma Client 与 tRPC 完美结合，是实现端到端类型安全的数据库基础。
数据校验,Zod,Schema 校验：与 tRPC 和 Prisma 深度集成，用于校验 API 的输入/输出，确保进入数据库和返回给客户端的数据都是干净、有效的。
Web 前端 (SEO),Next.js,面向公众的 Web 应用：用于构建需要 SSR/SSG 以获得最佳性能和 SEO 的页面，如官网、博客、营销页面。
Web 前端 (SPA),Vite + React,数据密集型 Web 应用：用于构建交互复杂的单页应用，如用户登录后的控制台、管理后台。Vite 提供顶级的开发服务器性能。
移动端,Expo (React Native),iOS & Android 应用：通过 Expo 简化 React Native 的开发、构建和发布流程，与 Web 端最大程度地复用代码。
跨平台 UI,Tamagui,通用 UI 系统：策略二的核心。它不仅是 UI 组件库，更是一个跨平台的样式系统和性能编译器。实现“一次编写，到处运行”，并确保在 Web 和 Native 上都有接近原生的性能。
实时通信,tRPC Subscriptions (WebSocket),实时数据流：利用 tRPC 内置的订阅功能，以完全类型安全的方式实现 WebSocket 通信，用于聊天、通知、实时协作等功能。
开发工具,Storybook,UI 组件开发与文档：在隔离环境中开发和测试 packages/ui 中的 Tamagui 组件，自动生成可视化文档。
代码规范,ESLint + Prettier,代码质量与一致性：在整个 Monorepo 中强制执行统一的代码风格和质量标准。
容器化,Docker,开发与部署：通过 docker-compose 简化本地开发环境的搭建（如启动 Postgres 数据库），并为生产环境的部署提供标准化的容器镜像。